https://www.typescriptlang.org/docs/handbook/basic-types.html
https://stackblitz.com/edit/typescript-vxnz8z?file=index.ts
https://www.typescriptlang.org/docs/handbook/decorators.html#class-decorators -- Los decoradores sirven para cambiar las clases
									         en el momento que son definidias

Tipado a variables:
let algo: string | number = 1400;
algo = "Hola";

Tipado a arreglos:
let habilidades: string = ["Counter", "Healing"]
let habilidades: (boolean | string | number) = ["Bash", 1000, true]


interface Personaje {
	nombre: String;
	hp: number;
	habilidades: string[];
	puebloNatal?: string:   <- Es opcional
}

Tipado a objetos: Podemos definir las interfaces
const personaje: Personaje = {
	nombre: "Strider",
	hp: 100,
	habilidades: ["Counter", "Healing", "Bash"]
}

function multiplicar( numero: number, otroNumero?: number, base: number = 2): {
	return numero * base;
}

interface SuperHeroeDireccion {
  calle: String;
  pais: String;
  ciudad: String;
}

interface SuperHeroe {
  nombre: String;
  edad: number;
  direccion: SuperHeroeDireccion;
  mostrarDireccion: () => String;
}

const superHeroe: SuperHeroe = {
  nombre: 'Spiderman',
  edad: 30,
  direccion: {
    calle: 'Main St',
    pais: 'USA',
    ciudad: 'NY',
  },
  mostrarDireccion() {
    return (
      this.nombre + ', ' + this.direccion.ciudad + ', ' + this.direccion.pais
    );
  },
};


interface Reproductor {
  volumen: number;
  segundo: number;
  cancion: string;
  detalles: Detalles;
}

interface Detalles {
  autor: string;
  anio: number;
}

const reproductor: Reproductor = {
  volumen: 90,
  segundo: 36,
  cancion: "Mess",
  detalles: {
    autor: "Ed Sheeran",
    anio: 2015
  }
}

// Desestructuracion de objetos
const { volumen, segundo, cancion, detalles: { autor, anio } } = reproductor;
// const { autor, anio } = detalles;

// Desestructuracion de arreglos
const dbz: String[] = ["Goku", "Vegeta", "Trunks"]
const [ goku, vegeta, trunks ] = dbz; // El nombre no es importante, sino la posicion

// Si solo necesito algo, no se ponen las anteriores pero si dejo las comas
// const [ , , trunks] = dbz

// Desestructuracion de argumentos
interface Producto {
  desc: string;
  precio: number;
}

const telefono: Producto = {
  desc: "Nokia A1",
  precio: 150
}

const tableta: Producto = {
  desc: "Ipad A1",
  precio: 350
}

function calcularISV( productos: Producto[] ): [number, number] {

  let total = 0;

  // productos.forEach( producto => {
  //   total += producto.precio;
  // });

  productos.forEach( ({ precio }) => { // Se le aplica la desestructuracion
    total += precio;
  });

  return [total, total * 0.15];
}

const articulos = [ telefono, tableta ];
const [ total, isv ] = calcularISV( articulos );
console.log("Total", total)
console.log("ISV", isv)


// Crear clase de forma sencilla

class Heroe {
  constructor(
    public alterEgo: string,
    public edad: number,
    public nombreReal: string
  ) {}
}

